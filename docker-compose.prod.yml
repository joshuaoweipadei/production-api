version: '3.8'

services:
  # Main application service for production
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: production-api-prod
    ports:
      - '3000:3000'
    env_file:
      - .env.production
    volumes:
      # Only mount logs directory for persistence in production
      - production-api-logs:/app/logs
    networks:
      - production-api-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          'CMD',
          'node',
          '-e',
          'require("http").get("http://localhost:3000/health", (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })',
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # Optional: Redis for caching/sessions (uncomment if needed)
  # redis:
  #   image: redis:7-alpine
  #   container_name: production-api-redis
  #   command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password_change_in_production}
  #   volumes:
  #     - production-api-redis-data:/data
  #   networks:
  #     - production-api-network
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ['CMD', 'redis-cli', 'ping']
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5

  # Optional: Nginx reverse proxy (uncomment if needed)
  # nginx:
  #   image: nginx:alpine
  #   container_name: production-api-nginx
  #   ports:
  #     - '80:80'
  #     - '443:443'
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./ssl:/etc/ssl:ro
  #   depends_on:
  #     - app
  #   networks:
  #     - production-api-network
  #   restart: unless-stopped

networks:
  production-api-network:
    driver: bridge

volumes:
  production-api-logs:
    driver: local
  # production-api-redis-data:
  #   driver: local
